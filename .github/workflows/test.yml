name: Python package

on:
  - push
  - pull_request

jobs:
  test:
    if: github.event_name == 'push' || github.event.pull_request.merged == true

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    env:
      VIRTUAL_ENV: /tmp/virtualenv

    steps:
      - name: Clone branch
        # Cloning the branch directly (without actions/checkout@v2) is a few seconds faster.
        run: |
          # Clone branch.
          set -v
          git init ${{ github.workspace }}
          cd ${{ github.workspace }}
          git remote add origin https://github.com/${{ github.repository }}
          git config --local gc.auto 0
          git config --local advice.detachedHead 0
          git fetch --no-tags --depth=100 origin +${{ github.sha }}:${{ github.ref }}
          git checkout --progress --force ${{ github.ref }}

          # Set modified time of each file to the latest commit time so pytest caching works.
          # Credit: https://stackoverflow.com/questions/2458042/restore-a-files-modification-time-in-git
          git log --pretty=%at --name-status --reverse |
            perl -ane '($x,$f)=@F;next if !$x;$t=$x,next if !defined($f)||$s{$f};$s{$f}=utime($t,$t,$f),next if $x=~/[AM]/;'

      - name: Cache virtualenv
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            /tmp/virtualenv
            /tmp/pytest_cache
          key: "\
            ${{ runner.os }}-\
            virtualenv-${{ matrix.python-version }}-\
            ${{ hashFiles('Pipfile.lock') }}-\
            ${{ hashFiles('.github/workflows/test.yml') }}-\
            ${{ github.ref == 'refs/heads/main' && github.sha || github.ref }}"  # Always create a new cache on main.
          restore-keys: "\
            ${{ runner.os }}-\
            virtualenv-${{ matrix.python-version }}-\
            ${{ hashFiles('Pipfile.lock') }}-\
            ${{ hashFiles('.github/workflows/test.yml') }}-"

      - name: Install Python ${{ matrix.python-version }}
        if: steps.cache.outputs.cache-hit != 'true'
        # Use actions/setup-python@v2 to install Python. We install and invoke the action manually
        # (rather than with "use:") to avoid downloading it at all if we won't need it.
        run: |
          # Install Python
          set -v
          git -c advice.detachedHead=0 clone https://github.com/actions/setup-python -b v2 --depth 1 /tmp/setup-python
          env INPUT_PYTHON-VERSION=${{ matrix.python-version }} node /tmp/setup-python/dist/index.js

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m venv $VIRTUAL_ENV
          source $VIRTUAL_ENV/bin/activate
          python -m pip install pipenv
          python -m pipenv install --dev

      - name: Test with pytest
        run: |
          source $VIRTUAL_ENV/bin/activate
          python -m pytest --pylint --flake8 -o cache_dir=/tmp/pytest_cache
